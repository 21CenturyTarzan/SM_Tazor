/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PresaleInterface extends ethers.utils.Interface {
  functions: {
    "MIN_LOCKTIME()": FunctionFragment;
    "TazClaimed(address)": FunctionFragment;
    "TazTokenBought(address)": FunctionFragment;
    "TazorClaimed(address)": FunctionFragment;
    "TazorTokenBought(address)": FunctionFragment;
    "_getTazorValInBNB()": FunctionFragment;
    "_tokenTaz()": FunctionFragment;
    "_tokenTazor()": FunctionFragment;
    "availableTazTokensIDO()": FunctionFragment;
    "availableTazorTokensIDO()": FunctionFragment;
    "buyTazTokens(uint256)": FunctionFragment;
    "buyTazorTokens(uint256)": FunctionFragment;
    "claimRefund(address)": FunctionFragment;
    "claimTazToken(address)": FunctionFragment;
    "claimTazorToken(address)": FunctionFragment;
    "getTimediff()": FunctionFragment;
    "getWallet()": FunctionFragment;
    "hardCap()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isPresaleStopped()": FunctionFragment;
    "maxPurchase()": FunctionFragment;
    "minPurchase()": FunctionFragment;
    "owner()": FunctionFragment;
    "presaleResult()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAvailableTazTokens(uint256)": FunctionFragment;
    "setAvailableTazorTokens(uint256)": FunctionFragment;
    "setLockupTime(uint256)": FunctionFragment;
    "setWallet(address)": FunctionFragment;
    "softCap()": FunctionFragment;
    "startIDO(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "stopIDO()": FunctionFragment;
    "totalTazTokens()": FunctionFragment;
    "totalTazorTokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "weiRaised()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_LOCKTIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TazClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "TazTokenBought",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "TazorClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "TazorTokenBought",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTazorValInBNB",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_tokenTaz", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_tokenTazor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableTazTokensIDO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableTazorTokensIDO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTazTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTazorTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimRefund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimTazToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTazorToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimediff",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPresaleStopped",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAvailableTazTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvailableTazorTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setWallet", values: [string]): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startIDO",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopIDO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalTazTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTazorTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weiRaised", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_LOCKTIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TazClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TazTokenBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TazorClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TazorTokenBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTazorValInBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_tokenTaz", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tokenTazor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableTazTokensIDO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableTazorTokensIDO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTazTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTazorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTazToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTazorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimediff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPresaleStopped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvailableTazTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvailableTazorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startIDO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopIDO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTazTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTazorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weiRaised", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AirdropClaimed(address,uint256)": EventFragment;
    "DropSent(address[],uint256[])": EventFragment;
    "IDOStart(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetLockupTime(uint256)": EventFragment;
    "SwapETHForUSDT(uint256,address[])": EventFragment;
    "SwapUSDTForETH(uint256,address[])": EventFragment;
    "TazTokensClaimed(address,uint256)": EventFragment;
    "TazTokensPurchased(address,uint256,uint256)": EventFragment;
    "TazorTokensClaimed(address,uint256)": EventFragment;
    "TazorTokensPurchased(address,uint256,uint256)": EventFragment;
    "WithDrawMoney(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DropSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IDOStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLockupTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapETHForUSDT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapUSDTForETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazTokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazTokensPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazorTokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TazorTokensPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithDrawMoney"): EventFragment;
}

export type AirdropClaimedEvent = TypedEvent<
  [string, BigNumber],
  { receiver: string; amount: BigNumber }
>;

export type AirdropClaimedEventFilter = TypedEventFilter<AirdropClaimedEvent>;

export type DropSentEvent = TypedEvent<
  [string[], BigNumber[]],
  { receiver: string[]; amount: BigNumber[] }
>;

export type DropSentEventFilter = TypedEventFilter<DropSentEvent>;

export type IDOStartEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { startTime: BigNumber; softCap: BigNumber; hardCap: BigNumber }
>;

export type IDOStartEventFilter = TypedEventFilter<IDOStartEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetLockupTimeEvent = TypedEvent<[BigNumber], { time: BigNumber }>;

export type SetLockupTimeEventFilter = TypedEventFilter<SetLockupTimeEvent>;

export type SwapETHForUSDTEvent = TypedEvent<
  [BigNumber, string[]],
  { amountIn: BigNumber; path: string[] }
>;

export type SwapETHForUSDTEventFilter = TypedEventFilter<SwapETHForUSDTEvent>;

export type SwapUSDTForETHEvent = TypedEvent<
  [BigNumber, string[]],
  { amount: BigNumber; path: string[] }
>;

export type SwapUSDTForETHEventFilter = TypedEventFilter<SwapUSDTForETHEvent>;

export type TazTokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  { purchaser: string; value: BigNumber }
>;

export type TazTokensClaimedEventFilter =
  TypedEventFilter<TazTokensClaimedEvent>;

export type TazTokensPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { purchaser: string; value: BigNumber; amount: BigNumber }
>;

export type TazTokensPurchasedEventFilter =
  TypedEventFilter<TazTokensPurchasedEvent>;

export type TazorTokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  { purchaser: string; value: BigNumber }
>;

export type TazorTokensClaimedEventFilter =
  TypedEventFilter<TazorTokensClaimedEvent>;

export type TazorTokensPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { purchaser: string; value: BigNumber; amount: BigNumber }
>;

export type TazorTokensPurchasedEventFilter =
  TypedEventFilter<TazorTokensPurchasedEvent>;

export type WithDrawMoneyEvent = TypedEvent<
  [string, BigNumber],
  { _wallet: string; bnbBalance: BigNumber }
>;

export type WithDrawMoneyEventFilter = TypedEventFilter<WithDrawMoneyEvent>;

export interface Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_LOCKTIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    TazClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    TazTokenBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TazorClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    TazorTokenBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTazorValInBNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    _tokenTaz(overrides?: CallOverrides): Promise<[string]>;

    _tokenTazor(overrides?: CallOverrides): Promise<[string]>;

    availableTazTokensIDO(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableTazorTokensIDO(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTazTokens(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTazorTokens(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRefund(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTazToken(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTazorToken(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTimediff(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWallet(overrides?: CallOverrides): Promise<[string]>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    isPresaleStopped(overrides?: CallOverrides): Promise<[boolean]>;

    maxPurchase(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPurchase(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    presaleResult(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvailableTazTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvailableTazorTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockupTime(
      _locktime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    startIDO(
      endDate: BigNumberish,
      _minPurchase: BigNumberish,
      _maxPurchase: BigNumberish,
      _availableTazorTokens: BigNumberish,
      _availableTazTokens: BigNumberish,
      _softCap: BigNumberish,
      _hardCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    stopIDO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalTazTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTazorTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    weiRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_LOCKTIME(overrides?: CallOverrides): Promise<BigNumber>;

  TazClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  TazTokenBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  TazorClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  TazorTokenBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _getTazorValInBNB(overrides?: CallOverrides): Promise<BigNumber>;

  _tokenTaz(overrides?: CallOverrides): Promise<string>;

  _tokenTazor(overrides?: CallOverrides): Promise<string>;

  availableTazTokensIDO(overrides?: CallOverrides): Promise<BigNumber>;

  availableTazorTokensIDO(overrides?: CallOverrides): Promise<BigNumber>;

  buyTazTokens(
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTazorTokens(
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRefund(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTazToken(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTazorToken(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTimediff(overrides?: CallOverrides): Promise<BigNumber>;

  getWallet(overrides?: CallOverrides): Promise<string>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  isPresaleStopped(overrides?: CallOverrides): Promise<boolean>;

  maxPurchase(overrides?: CallOverrides): Promise<BigNumber>;

  minPurchase(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  presaleResult(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvailableTazTokens(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvailableTazorTokens(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockupTime(
    _locktime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWallet(
    _newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  startIDO(
    endDate: BigNumberish,
    _minPurchase: BigNumberish,
    _maxPurchase: BigNumberish,
    _availableTazorTokens: BigNumberish,
    _availableTazTokens: BigNumberish,
    _softCap: BigNumberish,
    _hardCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  stopIDO(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalTazTokens(overrides?: CallOverrides): Promise<BigNumber>;

  totalTazorTokens(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_LOCKTIME(overrides?: CallOverrides): Promise<BigNumber>;

    TazClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    TazTokenBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TazorClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    TazorTokenBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTazorValInBNB(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenTaz(overrides?: CallOverrides): Promise<string>;

    _tokenTazor(overrides?: CallOverrides): Promise<string>;

    availableTazTokensIDO(overrides?: CallOverrides): Promise<BigNumber>;

    availableTazorTokensIDO(overrides?: CallOverrides): Promise<BigNumber>;

    buyTazTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTazorTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRefund(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    claimTazToken(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTazorToken(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTimediff(overrides?: CallOverrides): Promise<BigNumber>;

    getWallet(overrides?: CallOverrides): Promise<string>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    isPresaleStopped(overrides?: CallOverrides): Promise<boolean>;

    maxPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    minPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    presaleResult(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAvailableTazTokens(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvailableTazorTokens(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockupTime(
      _locktime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallet(_newWallet: string, overrides?: CallOverrides): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startIDO(
      endDate: BigNumberish,
      _minPurchase: BigNumberish,
      _maxPurchase: BigNumberish,
      _availableTazorTokens: BigNumberish,
      _availableTazTokens: BigNumberish,
      _softCap: BigNumberish,
      _hardCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    stopIDO(overrides?: CallOverrides): Promise<void>;

    totalTazTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalTazorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AirdropClaimed(address,uint256)"(
      receiver?: null,
      amount?: null
    ): AirdropClaimedEventFilter;
    AirdropClaimed(receiver?: null, amount?: null): AirdropClaimedEventFilter;

    "DropSent(address[],uint256[])"(
      receiver?: null,
      amount?: null
    ): DropSentEventFilter;
    DropSent(receiver?: null, amount?: null): DropSentEventFilter;

    "IDOStart(uint256,uint256,uint256)"(
      startTime?: null,
      softCap?: null,
      hardCap?: null
    ): IDOStartEventFilter;
    IDOStart(
      startTime?: null,
      softCap?: null,
      hardCap?: null
    ): IDOStartEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetLockupTime(uint256)"(time?: null): SetLockupTimeEventFilter;
    SetLockupTime(time?: null): SetLockupTimeEventFilter;

    "SwapETHForUSDT(uint256,address[])"(
      amountIn?: null,
      path?: null
    ): SwapETHForUSDTEventFilter;
    SwapETHForUSDT(amountIn?: null, path?: null): SwapETHForUSDTEventFilter;

    "SwapUSDTForETH(uint256,address[])"(
      amount?: null,
      path?: null
    ): SwapUSDTForETHEventFilter;
    SwapUSDTForETH(amount?: null, path?: null): SwapUSDTForETHEventFilter;

    "TazTokensClaimed(address,uint256)"(
      purchaser?: string | null,
      value?: null
    ): TazTokensClaimedEventFilter;
    TazTokensClaimed(
      purchaser?: string | null,
      value?: null
    ): TazTokensClaimedEventFilter;

    "TazTokensPurchased(address,uint256,uint256)"(
      purchaser?: string | null,
      value?: null,
      amount?: null
    ): TazTokensPurchasedEventFilter;
    TazTokensPurchased(
      purchaser?: string | null,
      value?: null,
      amount?: null
    ): TazTokensPurchasedEventFilter;

    "TazorTokensClaimed(address,uint256)"(
      purchaser?: string | null,
      value?: null
    ): TazorTokensClaimedEventFilter;
    TazorTokensClaimed(
      purchaser?: string | null,
      value?: null
    ): TazorTokensClaimedEventFilter;

    "TazorTokensPurchased(address,uint256,uint256)"(
      purchaser?: string | null,
      value?: null,
      amount?: null
    ): TazorTokensPurchasedEventFilter;
    TazorTokensPurchased(
      purchaser?: string | null,
      value?: null,
      amount?: null
    ): TazorTokensPurchasedEventFilter;

    "WithDrawMoney(address,uint256)"(
      _wallet?: null,
      bnbBalance?: null
    ): WithDrawMoneyEventFilter;
    WithDrawMoney(_wallet?: null, bnbBalance?: null): WithDrawMoneyEventFilter;
  };

  estimateGas: {
    MIN_LOCKTIME(overrides?: CallOverrides): Promise<BigNumber>;

    TazClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TazTokenBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TazorClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    TazorTokenBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTazorValInBNB(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenTaz(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenTazor(overrides?: CallOverrides): Promise<BigNumber>;

    availableTazTokensIDO(overrides?: CallOverrides): Promise<BigNumber>;

    availableTazorTokensIDO(overrides?: CallOverrides): Promise<BigNumber>;

    buyTazTokens(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTazorTokens(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRefund(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTazToken(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTazorToken(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTimediff(overrides?: CallOverrides): Promise<BigNumber>;

    getWallet(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isPresaleStopped(overrides?: CallOverrides): Promise<BigNumber>;

    maxPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    minPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    presaleResult(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvailableTazTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvailableTazorTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockupTime(
      _locktime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startIDO(
      endDate: BigNumberish,
      _minPurchase: BigNumberish,
      _maxPurchase: BigNumberish,
      _availableTazorTokens: BigNumberish,
      _availableTazTokens: BigNumberish,
      _softCap: BigNumberish,
      _hardCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    stopIDO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalTazTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalTazorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_LOCKTIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TazClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TazTokenBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TazorClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TazorTokenBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTazorValInBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tokenTaz(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tokenTazor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableTazTokensIDO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableTazorTokensIDO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTazTokens(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTazorTokens(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRefund(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTazToken(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTazorToken(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTimediff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPresaleStopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPurchase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPurchase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvailableTazTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvailableTazorTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockupTime(
      _locktime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWallet(
      _newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startIDO(
      endDate: BigNumberish,
      _minPurchase: BigNumberish,
      _maxPurchase: BigNumberish,
      _availableTazorTokens: BigNumberish,
      _availableTazTokens: BigNumberish,
      _softCap: BigNumberish,
      _hardCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopIDO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalTazTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTazorTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weiRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
